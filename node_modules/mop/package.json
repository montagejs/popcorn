{
  "name": "mop",
  "version": "0.15.1",
  "title": "Montage Optimizer",
  "description": "Optimizes Montage applications for production by minifying, to reduce file size, and creating bundles, to reduce the number of requests.",
  "keywords": [
    "montage",
    "optimization",
    "production"
  ],
  "main": "optimize.js",
  "scripts": {
    "test": "istanbul test jasmine-node -- spec && jshint optimize.js lib/",
    "integration": "mop-integration"
  },
  "dependencies": {
    "montage": "~0.14.6",
    "mr": "~0.15.0 || ~0.14.2 || ~0.13.0",
    "collections": "~1.0.1",
    "q": "1.0.0",
    "q-io": "~1.11.0",
    "url2": "~1.0.1",
    "semver": "~1.1.4",
    "uglify-js": "~2.2.5",
    "optimist": "~0.5.0",
    "csso": "~1.3.7",
    "html-minifier": "~0.5.2",
    "minidom": "~1.0.0"
  },
  "devDependencies": {
    "jasmine-node": "~1.5.0",
    "sandboxed-module": "~0.1.4",
    "istanbul": "~0.1.34",
    "jshint": "~2.1.4",
    "mop-integration": "git://github.com/montagejs/mop-integration.git#master"
  },
  "exclude": [
    "builds"
  ],
  "bin": {
    "mop": "optimize.js"
  },
  "preferGlobal": true,
  "readme": "[![Build Status](https://travis-ci.org/montagejs/mop.png?branch=master)](http://travis-ci.org/montagejs/mop)\n\nMontage Optimizer\n=================\n\nfor **Montage** ~0.14.6 and **Mr** ~0.15.0, ~0.14.2 and ~0.13.0.\n\nOptimizes Montage applications for production by minifying, to reduce file\nsize, and creating bundles, to reduce the number of requests.\n\nInstall Mop globally with NPM.\n\n```\nnpm install -g mop\n```\n\nMop can be run in any directory containing a Montage application.\n\n```bash\n$ ls\nindex.html    node_modules/ package.json  ui/\n$ ls node_modules/\nmontage/\n$ mop\n# performs reading, processing and bundling steps\n$ ls builds/\nmy-app        my-app@f7e7db2/\n```\n\nFeatures\n========\n\n-   writes whole packages into an incrementally updated builds\n    directory, giving each package a consistent hash\n-   optionally generates AppCache manifest files for every package\n-   performs optimizing transformations on whole packages, whole files,\n    and parts of files\n    -   JavaScript minification using UglifyJS (including script\n        blocks)\n    -   HTML minification using JSDOM\n    -   CSS using CSSOM (including style blocks)\n    -   JSON files\n    -   Montage serialization minification (and precompilation is a\n        goal) (including ``text/montage-serialization`` script\n        blocks)\n    -   rewrites inter-package URL’s in HTML and CSS to use relative\n        URL’s among the build products, regardless of where the\n        dependencies are installed in development\n    -   converts all modules into scripts, suitable for script\n        injection, particularly for cross-origin dependencies and\n        Content Security Policies.\n    -   optionally bundles and shards applications\n        -   aggregates the bootstrapping files and the transitive\n            dependencies of each HTML file that has a `montage.js`\n            bootstrapping script into a single script that gets loaded\n            instead of `montage.js`\n        -   can produce a sequence of preloading bundles, to start\n            loading after the main application starts.  Each phase of\n            the preload sequence can be optionally split into parallel\n            downloads or \"shards\".\n-   optionally, lints whole applications\n    -   using JSHint for JavaScript in individual files and script\n        blocks\n    -   checks for broken links in HTML\n    -   checks for unnecessary script block attributes\n    -   checks for JavaScript parse errors in files and script blocks\n    -   checks for JSON parse errors in files and script block,\n        (planning to also check Montage serialization format)\n    -   checks for copyright notices in HTML, CSS, and JavaScript\n-   operates holistically on a package and all of its dependencies\n\n\nUsage\n=====\n\nCreates a ``builds`` directory from one or more applications, packages,\nand all their dependencies.\t The ``builds`` directory will be created in\nyour current working directory.\n\nUsage:\n\n\tmop [-lfc] [-d @] [--target <build-dir>] <source-package>\n\ne.g,\n\n\t$ mop calculator\n\t$ mop -t builds calculator\n\n``-t`` or ``--target`` changes the default target build directory.\nThe default is ``builds`` relative to the current working directory.\n\n``-o 0`` or ``--optimize 0`` disables optimizating transforms.\n\n``-l`` or ``--lint`` provides per-file warnings if packaged files do\nnot pass JSLint or various other sanity checks like script MIME types\nand known JSON schemas.\n\n``-d`` or ``--delimiter`` allows you to override the symbol used between\npackage names and package hashes in the builds directory, which is ``@``\nby default.\n\n``--no-css`` allows you to disable CSS transforms.  CSSOM cannot handle\nsome modern CSS.\n\nYour project will be assembled in the builds directory.\n\n### Notes\n\nThe bootstrap bundle Mop creates is usually large, as it contains the\nbootrapping code and the initial modules and all their dependencies. To\navoid the download of this file blocking the rendering of your page make\nsure to include the `async` attribute in the bootstrap script tag:\n\n```html\n<!-- Mr -->\n<script src=\"node_modules/mr/bootstrap.js\" data-module=\"index\" async></script>\n<!-- Montage -->\n<script src=\"node_modules/montage/montage.js\" async></script>\n```\n\nAPI\n---\n\n```javascript\nvar optimize = require(\"mop\");\n\noptimize(process.cwd()).then(function () {\n    console.log(\"Optimization done.\");\n});\n```\n\n### optimize(location, [config])\n\nOptimize the package at the given location.\n\n * location `string` An absolute path to a directory containing an app\nto optimize.\n * [config] `Object` Configuration for optimization.\n     * [buildLocation=\"builds\"] `string` An absolute or relative path for a directory to generate the optimized files in.\n     * [minify=true] `boolean` Whether to minify the files.\n     * [lint=false] `boolean` Whether to lint the files and output warnings.\n     * [noCss=true] `boolean` Whether to optimize CSS. Cannot handle some modern CSS, and so disabled by default.\n     * [delimiter=\"@\"] `string` Symbol to use between the package name and the package hash, e.g. `my-app@f7e7db2`\n     * [out=spinner] `Object` An object to use for logging.\n         * [log] `Function` Variadic function that outputs a normal message.\n         * [warn] `Function` Variadic function that outputs a warning.\n         * [status] `Function` Variadic function that outputs a status message. These messages are temporary, high volume and should not be permanently displayed. If called with no arguments it should clear the displayed status.\n\n\nPackage JSON\n============\n\nThe build system uses ``package.json`` files to discover dependencies.\nThese dependencies must always be packages themselves.\n\nFor a comprehensive view of what can be in a ``package.json``, see the\n[UncommonJS specification][1].\n\n[1]: https://github.com/kriskowal/uncommonjs/blob/master/packages/specification.md\n\nFor the purpose of the build system, the following properties are\nimportant:\n\n-   ``dependencies``: In the presence of a ``dependencies`` property,\n    the build system assumes that the package was designed for NPM and\n    that its dependencies were locally installed by NPM.  That means\n    that they can be found by searching the ``node_modules`` directory\n    of the package.  ``dependencies`` are internally transformed into\n    ``mappings``, assuming that the package is in ``node_modules``, or\n    the directory specified by ``directories.packages``.\n\n-   ``mappings``: A more flexible dependency management block.  The\n    local module identifier can be different than the registered package\n    name.  The dependency can have `location`, `name`, `version`, and\n    `hash` properties.  If the dependency is a string, it is coerced to\n    an object with a location property.\n\n    If a mapping has the same name as a dependency, the mapping\n    overrides the dependency at run-time, but NPM will only use the\n    `dependencies` block to install.\n\n        {\n            \"mappings\": {\n                \"montage\": \"../montage/\"\n            }\n        }\n\n-   ``bundle``: For application packages, configures how the optimizer\n    will bundle modules so that they can be downloaded by the browser\n    with HTTP requests.\n\n    -   An array turns on bundling as above, but also sets up a\n        prioritized preloading sequence.  Each element of the array\n        corresponds to a preloading phase.  Between each phase, the\n        run-time has an opportunity to use the newly loaded modules,\n        while subsequent phases download in the background.\n\n        Each element of the array can be a single module identifier or\n        an array of module identifiers.  Each loading phase will include\n        all of these modules and their transitive dependencies, but will\n        exclude any modules that would already be loaded in a prior\n        phase or the initial bundle.\n\n        The run-time supresses all lazy loading until preloading has\n        been finished to avoid issuing multiple requests for the same\n        modules.  However, as a consequence, applications should plan to\n        finish preloading before being provoked by the user to\n        load modules on demand.\n\n    For the purpose of bundling, Montage Optimizer has a broader view of\n    what constitutes a dependency than the Montage run-time in\n    development mode.\n\n    -   For a JavaScript module, as with the Montage run-time in\n        development, all modules mentioned in `require(\"\")` calls with a\n        string argument.\n\n    -   Additionally, for an HTML file, dependencies include:\n\n        -   The referenced serialization of a `<link\n            rel=\"text/montage-serialization\">` tag.\n        -   The modules refered to in a `<script\n            type=\"text/montage-serialization\">` as defined by\n            serialization dependencies.\n\n    -   For a serialization, dependencies include every module mentioned\n        in the serialization objects through the \"prototype\" property\n        (or deprecated \"module\" property), unless the \"lazy\" property is\n        true.\n\n    -   For the eponymous JavaScript module in a Reel, like\n        `main.reel/main.js`, the corresponding HTML template file, if it\n        exists, such as `main.reel/main.html`.\n\n-   ``shard``: In conjunction with bundling and preloading, \"shard\"\n    specifies a maximum number of TCP connections to dedicate to\n    downloading module bundles in parallel at run-time.  Without\n    sharding, each phase of preloading is downloaded from a single\n    bundle file with some number of modules.  With sharding, that bundle\n    is divided into smaller files and the optimizer uses a heuristic\n    packing algorithm to evenly distribute the modules among these\n    bundles.\n\n-   ``appcache``: For application packages, instructs the optimizer to\n    generate an appcache manifest.  The manifest will contain all of the\n    resources in an all used packages except those explicitly excluded\n    in each package.  The `appcache` property can be either `true` or an\n    object with additional configuration for manifests.\n\n    -   ``fallback`` is an object that causes the browser to redirect\n        from a network URL to a cached URL when the browser is offline.\n        These get incorporated in the generated HTML5 appcache manifest\n        under the ``FALLBACK:`` section.\n\n-   ``exclude``: A list of glob patterns for files and directory trees\n    in the package, relative to the package root, that must not be\n    included in a production build and its appcache manifest. These\n    exclusions may include ``*`` for zero or more wild card characters\n    in a file name, ``?`` for a single wild card character in a file\n    name, or ``**`` for recursive directory traversal.\n\n        {\n            \"exclude\": [\n                \"**/tests\",\n                \"benchmarks\",\n                \"examples\",\n                \"docs\"\n            ]\n        }\n\n",
  "readmeFilename": "README.md",
  "_id": "mop@0.15.1",
  "dist": {
    "shasum": "bb579d09cd9e86c3fcbeea1a8aaf1370373ee274"
  },
  "_from": "mop@",
  "_resolved": "https://registry.npmjs.org/mop/-/mop-0.15.1.tgz"
}
