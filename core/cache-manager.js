var ServiceWorker=require("./service-worker").ServiceWorker,CacheManager={supportServiceWorker:!!window.applicationCache,hasCacheManifest:!!document.querySelector("html").getAttribute("manifest"),cacheStaleEvents:["checking","progress","updating","cached","noUpdate","updateReady"],appCache:window.applicationCache,appUpdateTimer:null,options:{reloadOnUpdateReady:!1,confirmOnUpdateReady:!0,offlineWorkerScope:location.pathname,offlineWorkerFile:"cache-worker.js",updateCheckInterval:9e5,updateRetryInterval:18e5},events:{},lastEventType:null,emit:function(e,a){var t=this,r=(a&&a.currentTarget!==t.appCache,t.options),n=t.events;"function"==typeof n[e]&&n[e](a),"updateReady"!==t.lastEventType&&"updateReady"===e&&(r.confirmOnUpdateReady?window.confirm("A new version is available. Install now!")&&window.location.reload():r.reloadOnUpdateReady&&window.location.reload()),t.lastEventType=e},isAppCacheStale:function(){var e=this,a=e.hasCacheManifest,t=e.appCache;return a&&t&&(t.status===t.UPDATEREADY||t.status===t.CHECKING||t.status===t.DOWNLOADING)},getCacheWorker:function(){var e=this.options;return ServiceWorker.getWorkerRegistration(e.offlineWorkerFile,{scope:e.offlineWorkerScope})},listenToUpdate:function(){var e=this,a=e.options,t=e.hasCacheManifest,r=e.appCache;a.updateCheckInterval&&(clearTimeout(e.appUpdateTimer),e.appUpdateTimer=setTimeout(function n(){e.checkForUpdate(),a.updateRetryInterval&&(clearTimeout(e.appUpdateTimer),e.appUpdateTimer=setTimeout(n,a.updateRetryInterval))},a.updateCheckInterval)),ServiceWorker.supportServiceWorker&&t&&e.getCacheWorker().then(function(a){return ServiceWorker.getServiceWorker().then(function(t){t.addEventListener("message",function(t){if(t.source&&a.active&&t.source.scriptURL===a.active.scriptURL){var r=t.data;"error"===r?e.emit("error",t):e.cacheStaleEvents.indexOf(r)!==-1&&e.isAppCacheStale()===!1&&e.emit(r,t)}})})},e.emit.bind(e,"error")),r&&(r.status===r.UPDATEREADY?e.emit("updateReady",event):r.status===r.DOWNLOADING&&e.emit("downloading",event),r.addEventListener("cached",e.emit.bind(e,"cached"),!1),r.addEventListener("checking",e.emit.bind(e,"checking"),!1),r.addEventListener("downloading",e.emit.bind(e,"downloading"),!1),r.addEventListener("error",e.emit.bind(e,"error"),!1),r.addEventListener("noupdate",e.emit.bind(e,"noUpdate"),!1),r.addEventListener("obsolete",e.emit.bind(e,"error"),!1),r.addEventListener("progress",e.emit.bind(e,"progress"),!1),r.addEventListener("updateready",function(a){r.status===r.UPDATEREADY&&e.emit("updateReady",a)},!1))},checkForUpdate:function(){var e=this,a=e.hasCacheManifest,t=e.appCache;try{ServiceWorker.supportServiceWorker&&a&&e.getCacheWorker().then(function(e){return ServiceWorker.sendWorkerMsg(e,"Update")}),a&&t&&t.update&&t.status!==t.UNCACHED&&t.status!==t.UPDATEREADY&&t.status!==t.CHECKING&&t.status!==t.DOWNLOADING&&t.update()}catch(r){e.emit("error",r)}},clearCache:function(){var e=this,a=e.hasCacheManifest,t=e.appCache;try{e.emit("progress"),ServiceWorker.supportServiceWorker&&e.getCacheWorker().then(function(e){return ServiceWorker.sendWorkerMsg(e,"CacheClear")["finally"](function(){return e.unregister()})}),a&&t&&t.abort&&t.status!==t.UNCACHED&&t.abort(),e.emit("uncached")}catch(r){e.emit("error",r)}}};exports.CacheManager=CacheManager,window.checkForUpdate=CacheManager.checkForUpdate.bind(CacheManager),window.clearCache=CacheManager.clearCache.bind(CacheManager),exports.eventCache=CacheManager.events,exports.listenToUpdate=CacheManager.listenToUpdate.bind(CacheManager),exports.clearCache=CacheManager.clearCache.bind(CacheManager),exports.checkForUpdate=CacheManager.checkForUpdate.bind(CacheManager);