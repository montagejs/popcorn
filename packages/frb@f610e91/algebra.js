function solve(t,r){return solve.semantics.solve(t,r)}module.exports=solve,solve.semantics={solve:function(t,r){for(;;){for(;this.simplifiers.hasOwnProperty(t.type);){var e=this.simplifiers[t.type](t);if(!e)break;t=e}var n=this.rotateTargetToSource.hasOwnProperty(t.type),o=this.rotateSourceToTarget.hasOwnProperty(r.type);if(!n&&!o)break;n?(r=this.rotateTargetToSource[t.type](t,r),t=t.args[0]):o&&(t=this.rotateSourceToTarget[r.type](t,r),r=r.args[0])}return[t,r]},simplifiers:{not:function(t){var r=t.args[0];if("not"===r.type)return r.args[0]},add:function(t){var r=t.args[0];if("literal"===r.type&&""===r.value)return{type:"toString",args:[t.args[1]]}},someBlock:function(t){return{type:"not",args:[{type:"everyBlock",args:[t.args[0],{type:"not",args:[t.args[1]]}]}]}}},rotateTargetToSource:{reflect:function(t,r){return{type:t.type,args:[r]}},invert:function(t,r,e){return{type:e,args:[r,t.args[1]]}},toNumber:function(t,r){return this.reflect(t,r)},toString:function(t,r){return this.reflect(t,r)},not:function(t,r){return this.reflect(t,r)},neg:function(t,r){return this.reflect(t,r)},add:function(t,r){return this.invert(t,r,"sub")},sub:function(t,r){return this.invert(t,r,"add")},mul:function(t,r){return this.invert(t,r,"div")},div:function(t,r){return this.invert(t,r,"mul")},pow:function(t,r){return this.invert(t,r,"root")},root:function(t,r){return this.invert(t,r,"pow")},join:function(t,r){return this.invert(t,r,"split")},split:function(t,r){return this.invert(t,r,"join")}},rotateSourceToTarget:{rangeContent:function(t,r){return"rangeContent"===t.type?t:{type:r.type,args:[t]}}}};