function compile(e){return compile.semantics.compile(e)}var compileObserver=require("./compile-observer"),Observers=require("./observers"),Binders=require("./binders"),solve=require("./algebra"),valueSyntax={type:"value"},trueSyntax={type:"literal",value:!0};module.exports=compile,compile.semantics={compilers:{property:Binders.makePropertyBinder,get:Binders.makeGetBinder,has:Binders.makeHasBinder,only:Binders.makeOnlyBinder,one:Binders.makeOneBinder,rangeContent:Binders.makeRangeContentBinder,mapContent:Binders.makeMapContentBinder,reversed:Binders.makeReversedBinder,and:Binders.makeAndBinder,or:Binders.makeOrBinder},syntaxTypeCompile:{"default":function(e){return this.compile(e.args[0])},literal:function(e){if(null==e.value)return Function.noop;throw new Error("Can't bind to literal: "+e.value)},equals:function(e){return Binders.makeEqualityBinder(this.compile(e.args[0]),compileObserver(e.args[1]))},"if":function(e){return Binders.makeConditionalBinder(compileObserver(e.args[0]),this.compile(e.args[1]),this.compile(e.args[2]))},and_or:function(e){var r=solve(e.args[0],valueSyntax),n=solve(e.args[1],valueSyntax),i=this.compile(r[0]),t=this.compile(n[0]),s=compileObserver(r[1]),a=compileObserver(n[1]),o=compileObserver(e.args[0]),l=compileObserver(e.args[1]);return this.compilers[e.type](i,t,o,l,s,a)},everyBlock:function(e){var r=compileObserver(e.args[0]),n=solve(e.args[1],trueSyntax),i=this.compile(n[0]),t=compileObserver(n[1]);return Binders.makeEveryBlockBinder(r,i,t)},rangeContent:function(e){var r,n=compileObserver(e.args[0]);try{r=this.compile(e.args[0])}catch(i){r=Function.noop}return Binders.makeRangeContentBinder(n,r)},defined:function(e){var r=this.compile(e.args[0]);return Binders.makeDefinedBinder(r)},parent:function(e){var r=this.compile(e.args[0]);return Binders.makeParentBinder(r)},"with":function(e){var r=compileObserver(e.args[0]),n=this.compile(e.args[1]);return Binders.makeWithBinder(r,n)}},compile:function(e){var r,n=this.compilers;if(r=this.syntaxTypeCompile[e.type])return r.call(this,e);if(n.hasOwnProperty(e.type)){for(var i=[],t=compileObserver.semantics,s=0,a=e.args.length;s<a;s++)i.push(compileObserver.call(t,e.args[s]));return 1===i.length?n[e.type].call(null,i[0]):2===i.length?n[e.type].call(null,i[0],i[1]):n[e.type].apply(null,i)}throw new Error("Can't compile binder for "+JSON.stringify(e.type))}},compile.semantics.syntaxTypeCompile.and=compile.semantics.syntaxTypeCompile.or=compile.semantics.syntaxTypeCompile.and_or;