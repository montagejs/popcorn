"use strict";var assert=require("chai").assert,coerceString=require("../../string/coerce"),isArray=require("../../array/is"),ensureIterable=require("../../iterable/ensure");describe("iterable/ensure",function(){it("Should return input value",function(){var e=[];assert.equal(ensureIterable(e),e)}),it("Should allow strings with allowString option",function(){var e="foo";assert.equal(ensureIterable(e,{allowString:!0}),e)}),it("Should crash on invalid value",function(){try{throw ensureIterable("foo"),new Error("Unexpected")}catch(e){assert.equal(e.name,"TypeError"),assert(e.message.includes("is not expected iterable value"))}}),describe("Should support 'coerceItem' option",function(){it("Should resolve coerced array",function(){var e=ensureIterable(new Set(["foo",12]),{coerceItem:coerceString});assert(isArray(e)),assert.deepEqual(e,["foo","12"])}),it("Should crash if some value is non coercible",function(){try{throw ensureIterable(["foo",{}],{coerceItem:coerceString}),new Error("Unexpected")}catch(e){assert.equal(e.name,"TypeError"),assert(e.message.includes("is not expected iterable value"))}})})});