"use strict";var assert=require("chai").assert,isIterable=require("../../iterable/is");describe("iterable/is",function(){it("Should return true on array",function(){assert.equal(isIterable([]),!0)}),it("Should return true on arguments",function(){assert.equal(isIterable(function(){return arguments}()),!0)}),it("Should by default return false on string",function(){assert.equal(isIterable("foo"),!1)}),it("Should accept strings if specified",function(){assert.equal(isIterable("foo",{allowString:!0}),!0)}),it("Should support denyEmpty option",function(){assert.equal(isIterable([],{denyEmpty:!0}),!1),assert.equal(isIterable([null],{denyEmpty:!0}),!0),assert.equal(isIterable("",{allowString:!0,denyEmpty:!0}),!1),assert.equal(isIterable("foo",{allowString:!0,denyEmpty:!0}),!0)}),"function"==typeof Set&&it("Should return true on set",function(){assert.equal(isIterable(new Set),!0)}),"function"==typeof Map&&it("Should return true on set",function(){assert.equal(isIterable(new Map),!0)}),it("Should return false on plain object",function(){assert.equal(isIterable({}),!1)}),it("Should return false on function",function(){assert.equal(isIterable(function(){return!0}),!1)}),"function"==typeof Object.create&&it("Should return false on object with no prototype",function(){assert.equal(isIterable(Object.create(null)),!1)}),it("Should return false on string",function(){assert.equal(isIterable("foo"),!1)}),it("Should return false on empty string",function(){assert.equal(isIterable(""),!1)}),it("Should return false on number",function(){assert.equal(isIterable(123),!1)}),it("Should return false on NaN",function(){assert.equal(isIterable(NaN),!1)}),it("Should return false on boolean",function(){assert.equal(isIterable(!0),!1)}),"function"==typeof Symbol&&it("Should return false on symbol",function(){assert.equal(isIterable(Symbol("foo")),!1)}),it("Should return false on null",function(){assert.equal(isIterable(null),!1)}),it("Should return false on undefined",function(){assert.equal(isIterable(void 0),!1)})});