montageDefine("9175499","test/iterable/ensure",{dependencies:["chai","../../string/coerce","../../array/is","../../iterable/ensure"],factory:function(e,r,o){"use strict";var t=e("chai").assert,n=e("../../string/coerce"),i=e("../../array/is"),a=e("../../iterable/ensure");describe("iterable/ensure",function(){it("Should return input value",function(){var e=[];t.equal(a(e),e)}),it("Should allow strings with allowString option",function(){var e="foo";t.equal(a(e,{allowString:!0}),e)}),it("Should crash on invalid value",function(){try{throw a("foo"),new Error("Unexpected")}catch(e){t.equal(e.name,"TypeError"),t(e.message.includes("is not expected iterable value"))}}),describe("Should support 'coerceItem' option",function(){it("Should resolve coerced array",function(){var e=a(new Set(["foo",12]),{coerceItem:n});t(i(e)),t.deepEqual(e,["foo","12"])}),it("Should crash if some value is non coercible",function(){try{throw a(["foo",{}],{coerceItem:n}),new Error("Unexpected")}catch(e){t.equal(e.name,"TypeError"),t(e.message.includes("is not expected iterable value"))}})})})}});