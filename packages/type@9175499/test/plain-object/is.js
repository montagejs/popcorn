"use strict";var assert=require("chai").assert,isPlainObject=require("../../plain-object/is");describe("plain-object/is",function(){it("Should return true on plain object",function(){assert.equal(isPlainObject({}),!0)}),"function"==typeof Object.create&&(it("Should return true on object with no prototype",function(){assert.equal(isPlainObject(Object.create(null)),!0)}),it("Should return false on object that inherits from object with no prototype",function(){assert.equal(isPlainObject(Object.create(Object.create(null))),!1)})),it("Should return false on Object.prototype",function(){assert.equal(isPlainObject(Object.prototype),!1)}),it("Should return false on prototype that derives from Object.prototype",function(){assert.equal(isPlainObject(RegExp.prototype),!1)}),it("Should return false on function",function(){assert.equal(isPlainObject(function(){return!0}),!1)}),it("Should return false on string",function(){assert.equal(isPlainObject("foo"),!1)}),it("Should return false on empty string",function(){assert.equal(isPlainObject(""),!1)}),it("Should return false on number",function(){assert.equal(isPlainObject(123),!1)}),it("Should return false on NaN",function(){assert.equal(isPlainObject(NaN),!1)}),it("Should return false on boolean",function(){assert.equal(isPlainObject(!0),!1)}),"function"==typeof Symbol&&it("Should return false on symbol",function(){assert.equal(isPlainObject(Symbol("foo")),!1)}),it("Should return false on null",function(){assert.equal(isPlainObject(null),!1)}),it("Should return false on undefined",function(){assert.equal(isPlainObject(void 0),!1)})});