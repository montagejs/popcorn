"use strict";var assert=require("chai").assert,isArray=require("../../array/is");describe("array/is",function(){it("Should return true on array",function(){assert.equal(isArray([]),!0)}),it("Should return false on array with no common API exposed",function(){var r=[];r.push=null,assert.equal(isArray(r),!1)}),it("Should return false on Array.prototype",function(){assert.equal(isArray(Array.prototype),!1)}),it("Should return false on plain object",function(){assert.equal(isArray({}),!1)}),it("Should return false on function",function(){assert.equal(isArray(function(){return!0}),!1)}),"function"==typeof Object.create&&it("Should return false on object with no prototype",function(){assert.equal(isArray(Object.create(null)),!1)}),it("Should return false on string",function(){assert.equal(isArray("foo"),!1)}),it("Should return false on empty string",function(){assert.equal(isArray(""),!1)}),it("Should return false on number",function(){assert.equal(isArray(123),!1)}),it("Should return false on NaN",function(){assert.equal(isArray(NaN),!1)}),it("Should return false on boolean",function(){assert.equal(isArray(!0),!1)}),"function"==typeof Symbol&&it("Should return false on symbol",function(){assert.equal(isArray(Symbol("foo")),!1)}),it("Should return false on null",function(){assert.equal(isArray(null),!1)}),it("Should return false on undefined",function(){assert.equal(isArray(void 0),!1)})});