"use strict";var assert=require("chai").assert,isRegExp=require("../../reg-exp/is");describe("reg-exp/is",function(){it("Should return true on regular expression",function(){assert.equal(isRegExp(/foo/),!0)}),it("Should return false on native regular expression with no common API exposed",function(){var e=/foo/;e.test=null,assert.equal(isRegExp(e),!1)}),it("Should return false on RegExp.prototype",function(){assert.equal(isRegExp(RegExp.prototype),!1)}),it("Should return false on regexp like string",function(){assert.equal(isRegExp("/foo/"),!1)}),it("Should return false on plain object",function(){assert.equal(isRegExp({}),!1)}),it("Should return false on function",function(){assert.equal(isRegExp(function(){return!0}),!1)}),it("Should return false on array",function(){assert.equal(isRegExp([]),!1)}),"function"==typeof Object.create&&it("Should return false on object with no prototype",function(){assert.equal(isRegExp(Object.create(null)),!1)}),it("Should return false on string",function(){assert.equal(isRegExp("foo"),!1)}),it("Should return false on empty string",function(){assert.equal(isRegExp(""),!1)}),it("Should return false on number",function(){assert.equal(isRegExp(123),!1)}),it("Should return false on NaN",function(){assert.equal(isRegExp(NaN),!1)}),it("Should return false on boolean",function(){assert.equal(isRegExp(!0),!1)}),"function"==typeof Symbol&&it("Should return false on symbol",function(){assert.equal(isRegExp(Symbol("foo")),!1)}),it("Should return false on null",function(){assert.equal(isRegExp(null),!1)}),it("Should return false on undefined",function(){assert.equal(isRegExp(void 0),!1)})});