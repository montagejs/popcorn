"use strict";var assert=require("chai").assert,isPrototype=require("../../prototype/is");describe("prototype/is",function(){it("Should return true on prototype",function(){assert.equal(isPrototype(Object.prototype),!0)}),it("Should return false on plain object",function(){assert.equal(isPrototype({}),!1)}),it("Should return false on function",function(){assert.equal(isPrototype(function(){return!0}),!1)}),it("Should return false on array",function(){assert.equal(isPrototype([]),!1)}),"function"==typeof Object.create&&it("Should return false on object with no prototype",function(){assert.equal(isPrototype(Object.create(null)),!1)}),it("Should return false on string",function(){assert.equal(isPrototype("foo"),!1)}),it("Should return false on empty string",function(){assert.equal(isPrototype(""),!1)}),it("Should return false on number",function(){assert.equal(isPrototype(123),!1)}),it("Should return false on NaN",function(){assert.equal(isPrototype(NaN),!1)}),it("Should return false on boolean",function(){assert.equal(isPrototype(!0),!1)}),"function"==typeof Symbol&&it("Should return false on symbol",function(){assert.equal(isPrototype(Symbol("foo")),!1)}),it("Should return false on null",function(){assert.equal(isPrototype(null),!1)}),it("Should return false on undefined",function(){assert.equal(isPrototype(void 0),!1)})});