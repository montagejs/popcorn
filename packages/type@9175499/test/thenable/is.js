"use strict";var assert=require("chai").assert,isThenable=require("../../thenable/is");describe("thenable/is",function(){it("Should return true on object with `then` method",function(){assert.equal(isThenable({then:function(){return!0}}),!0)}),"function"==typeof Promise&&it("Should return true on promise",function(){assert.equal(isThenable(Promise.resolve()),!0)}),it("Should return false on object with `then` non callable property",function(){assert.equal(isThenable({then:{}}),!1)}),it("Should return false on plain object",function(){assert.equal(isThenable({}),!1)}),it("Should return false on function",function(){assert.equal(isThenable(function(){return!0}),!1)}),it("Should return false on array",function(){assert.equal(isThenable([]),!1)}),"function"==typeof Object.create&&it("Should return false on object with no prototype",function(){assert.equal(isThenable(Object.create(null)),!1)}),it("Should return false on string",function(){assert.equal(isThenable("foo"),!1)}),it("Should return false on empty string",function(){assert.equal(isThenable(""),!1)}),it("Should return false on number",function(){assert.equal(isThenable(123),!1)}),it("Should return false on NaN",function(){assert.equal(isThenable(NaN),!1)}),it("Should return false on boolean",function(){assert.equal(isThenable(!0),!1)}),"function"==typeof Symbol&&it("Should return false on symbol",function(){assert.equal(isThenable(Symbol("foo")),!1)}),it("Should return false on null",function(){assert.equal(isThenable(null),!1)}),it("Should return false on undefined",function(){assert.equal(isThenable(void 0),!1)})});