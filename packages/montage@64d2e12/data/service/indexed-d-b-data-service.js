var PersistentDataService=require("data/service/persistent-data-service").PersistentDataService,DataStream=require("data/service/data-stream").DataStream,DataOperation=require("data/service/data-operation").DataOperation,Promise=require("core/promise").Promise,uuid=require("core/uuid"),DataOrdering=require("data/model/data-ordering").DataOrdering,DESCENDING=DataOrdering.DESCENDING,evaluate=require("frb/evaluate"),Map=require("collections/map"),OfflineService;exports.IndexedDBDataService=PersistentDataService.specialize({constructor:{value:function e(){e.call(this)}},deserializeSelf:{value:function(e){this["super"](e)}},_db:{value:void 0},provideDatabaseForModel:{value:function(e){var a,r,t=this,i=new Promise(function(i,o){a=i,r=o;var s=window.indexedDB.open(e.name,e.version);s?(s.identifier="openDatabase",s.model=e,s.addEventListener("upgradeneeded",t,!1),s.addEventListener("success",t,!1),s.addEventListener("error",t,!1),s.addEventListener("blocked",t,!1)):o(new Error("IndexedDB API not available"))});return i.resolve=a,i.reject=r,i}},_storage:{value:void 0},storage:{get:function(){return this._storage||(global.indexedDB?this._storage=this.storagePromiseForNameVersion(this.model.name,this.model.version):this._storage=Promise.reject(new Error("Your environment doesn't support IndexedDB."))),this._storage}},provideStorageForObjectDescriptor:{value:function(e){return this.storagePromiseForNameVersion(e.model.name,e.model.version)}},handleOpenDatabaseError:{value:function(e){this.databaseForModel(e.target.model).reject(e)}},handleOpenDatabaseBlocked:{value:function(e){this.databaseForModel(e.target.model).reject(e)}},handleOpenDatabaseSuccess:{value:function(e){this._db=e.target.result,this.databaseForModel(e.target.model).resolve(this._db)}},handleOpenDatabaseUpgradeneeded:{value:function(e){this.databaseForModel(e.target.model).reject(e)}},schema:{value:void 0}});