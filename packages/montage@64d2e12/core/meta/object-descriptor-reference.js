var Promise=require("../promise").Promise,ObjectDescriptorModule=require("./object-descriptor"),ModelModule=require("./model"),RemoteReference=require("./remote-reference").RemoteReference,ModelReference=require("./model-reference").ModelReference;exports.ObjectDescriptorReference=RemoteReference.specialize({constructor:{value:function(){this.superForValue("constructor")()}},identifier:{get:function(){return this._reference||(this._reference=this.referenceFromValue(this._value)),["objectDescriptor",(this._reference.objectDescriptorName||this._reference.blueprintName||"unnamed").toLowerCase(),"reference"].join("_")}},valueFromReference:{value:function(e){var r=e.objectDescriptorModule||e.blueprintModule,o=e.modelReference||e.binderReference,t=Promise.resolve(ModelModule.Model.group.defaultModel);return o&&(t=ModelReference.prototype.valueFromReference(o,require)),t.then(function(e){var o;return e?(o=require("./module-object-descriptor"),o.ModuleObjectDescriptor.getObjectDescriptorWithModuleId(r.id,r.require).then(function(o){if(o)return e.addObjectDescriptor(o),o;throw new Error("Error cannot find Object Descriptor "+r)})):ObjectDescriptorModule.ObjectDescriptor.getObjectDescriptorWithModuleId(r,require)})}},referenceFromValue:{value:function(e){var r={};return r.objectDescriptorName=e.name,r.objectDescriptorModule=e.objectDescriptorInstanceModule,e.model&&!e.model.isDefault&&(r.modelReference=ModelReference.prototype.referenceFromValue(e.model)),r}}});